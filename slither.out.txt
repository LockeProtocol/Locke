Missing function Variable not found: PackedSlot(bytes32) (context stdStorage)
Function not found expectRevert
Impossible to generate IR for TestMerkleStake.test_merkleStakeRevertAccess
Function not found expectRevert
Impossible to generate IR for TestArbitraryCall.test_arbitraryCallIncRevert
Function not found expectRevert
Impossible to generate IR for TestArbitraryCall.test_arbitraryCallGovRevert
Function not found expectRevert
Impossible to generate IR for TestArbitraryCall.test_arbitraryCallTokenRevert
Function not found expectRevert
Impossible to generate IR for TestArbitraryCall.test_arbitraryCallTransferRevert
Function not found expectRevert
Impossible to generate IR for TestDeposit.test_claimDepositIndefiniteRevert
Function not found expectRevert
Impossible to generate IR for TestDeposit.test_claimDepositAmtRevert
Function not found expectRevert
Impossible to generate IR for TestDeposit.test_claimDepositLockRevert
Function not found expectRevert
Impossible to generate IR for TestClaimReward.test_claimRewardLockRevert
Function not found expectRevert
Impossible to generate IR for TestClaimReward.test_claimZeroRevert
Function not found expectRevert
Impossible to generate IR for TestCreatorClaimTokens.test_creatorClaimTokensDoubleClaimRevert
Function not found expectRevert
Impossible to generate IR for TestCreatorClaimTokens.test_creatorClaimTokensCreatorRevert
Function not found expectRevert
Impossible to generate IR for TestCreatorClaimTokens.test_creatorClaimTokensStreamRevert
Function not found expectRevert
Impossible to generate IR for TestExit.test_exitZeroRevert
Function not found expectRevert
Impossible to generate IR for TestFees.test_claimFeesStreamRevert
Function not found expectRevert
Impossible to generate IR for TestFees.test_claimFeesGovRevert
Function not found expectRevert
Impossible to generate IR for TestFlashloan.test_flashloanTokenRevert
Function not found expectRevert
Impossible to generate IR for TestFlashloan.test_flashloanFeeRevert
Function not found expectRevert
Impossible to generate IR for TestFundStream.test_fundStreamZeroAmt
Function not found expectRevert
Impossible to generate IR for TestFundStream.test_fundStreamFundAfterStart
Function not found expectRevert
Impossible to generate IR for TestIncentive.test_createIncentiveWithZeroAmt
Function not found expectRevert
Impossible to generate IR for TestIncentive.test_createIncentiveWithToken
Function not found expectRevert
Impossible to generate IR for TestIncentive.test_claimIncentiveCreatorRevert
Function not found expectRevert
Impossible to generate IR for TestIncentive.test_claimIncentiveStreamRevert
Function not found expectRevert
Impossible to generate IR for TestIncentive.test_claimIncentiveAmt
Function not found expectRevert
Impossible to generate IR for TestRecovery.test_recoverRevertRewardTime
Function not found expectRevert
Impossible to generate IR for TestStake.test_stakeAmtRevert
Function not found expectRevert
Impossible to generate IR for TestStake.test_stakeTimeRevert
Function not found expectRevert
Impossible to generate IR for TestStake.test_stakeERCRevert
Function not found expectRevert
Impossible to generate IR for TestWithdraw.test_withdrawZeroRevert
Function not found expectRevert
Impossible to generate IR for TestWithdraw.test_withdrawBalanceRevert
[93m
LockeERC20.toString(uint256) (LockeERC20.sol#212-236) performs a multiplication on the result of a division:
	-temp = (48 + uint8(_i - _i / 10 * 10)) (LockeERC20.sol#230)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply[0m
[93m
Stream.claimReward() (Locke.sol#652-694) uses a dangerous strict equality:
	- rewardAmt == 0 (Locke.sol#686)
Stream.rewardPerToken() (Locke.sol#373-391) uses a dangerous strict equality:
	- totalVirtualBalance == 0 (Locke.sol#374)
Stream.updateStreamInternal() (Locke.sol#199-273) uses a dangerous strict equality:
	- streamAmt == 0 (Locke.sol#239)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities[0m
[92m
MinimallyGoverned.constructor(address)._governor (Locke.sol#19) lacks a zero-check on :
		- gov = _governor (Locke.sol#20)
MinimallyGoverned.setPendingGov(address).newPendingGov (Locke.sol#24) lacks a zero-check on :
		- pendingGov = newPendingGov (Locke.sol#26)
Stream.constructor(uint64,address,bool,address,address,uint32,uint32,uint32,uint32,uint16,bool).creator (Locke.sol#287) lacks a zero-check on :
		- streamCreator = creator (Locke.sol#327)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation[0m
[92m
Reentrancy in Stream.flashloan(address,address,uint112,bytes) (Locke.sol#831-854):
	External calls:
	- LockeCallee(to).lockeCall(msg.sender,token,amount,data) (Locke.sol#840)
	State variables written after the call(s):
	- depositTokenFlashloanFeeAmount += feeAmt (Locke.sol#848)
	- rewardTokenFeeAmount += feeAmt (Locke.sol#850)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
[92m
Reentrancy in Stream.flashloan(address,address,uint112,bytes) (Locke.sol#831-854):
	External calls:
	- LockeCallee(to).lockeCall(msg.sender,token,amount,data) (Locke.sol#840)
	Event emitted after the call(s):
	- Flashloaned(token,msg.sender,amount,feeAmt) (Locke.sol#853)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
[92m
StreamFactory.createStream(address,address,uint32,uint32,uint32,uint32,bool) (LockeFactory.sol#77-127) uses assembly
	- INLINE ASM (LockeFactory.sol#118-122)
StreamFactory.createStream(address,address,uint32,uint32,uint32,uint32,bool,bytes32) (LockeFactory.sol#135-185) uses assembly
	- INLINE ASM (LockeFactory.sol#175-179)
MerkleProof._efficientHash(bytes32,bytes32) (MerkleLocke.sol#29-35) uses assembly
	- INLINE ASM (MerkleLocke.sol#30-34)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
[92m
Pragma version0.8.11 (Locke.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version>=0.8.0 (LockeERC20.sol#2) allows old versions
Pragma version0.8.11 (LockeFactory.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.0 (LockeLens.sol#2) allows old versions
Pragma version0.8.11 (MerkleLocke.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
solc-0.8.11 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
[92m
Low level call in Stream.arbitraryCall(address,bytes) (Locke.sol#863-890):
	- (success,_ret) = who.call(data) (Locke.sol#883)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
[92m
Function MinimallyGoverned.__abdicate() (Locke.sol#39-43) is not in mixedCase
Function LockeERC20.DOMAIN_SEPARATOR() (LockeERC20.sol#165-167) is not in mixedCase
Parameter LockeERC20.toString(uint256)._i (LockeERC20.sol#212) is not in mixedCase
Variable LockeERC20.INITIAL_CHAIN_ID (LockeERC20.sol#46) is not in mixedCase
Variable LockeERC20.INITIAL_DOMAIN_SEPARATOR (LockeERC20.sol#48) is not in mixedCase
Constant StreamCreation.creationCode (LockeFactory.sol#8) is not in UPPER_CASE_WITH_UNDERSCORES
Constant MerkleStreamCreation.creationCode (LockeFactory.sol#12) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
[92m
Variable Stream.recoverTokens(address,address).excess_scope_0 (Locke.sol#807) is too similar to Stream.recoverTokens(address,address).excess_scope_1 (Locke.sol#816)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-are-too-similar[0m
[92m
StreamCreation.slitherConstructorConstantVariables() (LockeFactory.sol#7-9) uses literals with too many digits:
	- creationCode = type()(Stream).creationCode (LockeFactory.sol#8)
MerkleStreamCreation.slitherConstructorConstantVariables() (LockeFactory.sol#11-13) uses literals with too many digits:
	- creationCode = type()(MerkleStream).creationCode (LockeFactory.sol#12)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits[0m
. analyzed (36 contracts with 76 detectors), 29 result(s) found
